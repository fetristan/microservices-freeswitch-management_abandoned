// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: sessionsservice.proto

package sessionsservice

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Nil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nil) Reset() {
	*x = Nil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nil) ProtoMessage() {}

func (x *Nil) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nil.ProtoReflect.Descriptor instead.
func (*Nil) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{0}
}

type SessionsCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionCopy []*SessionCopy `protobuf:"bytes,1,rep,name=sessionCopy,proto3" json:"sessionCopy,omitempty"`
}

func (x *SessionsCopy) Reset() {
	*x = SessionsCopy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsCopy) ProtoMessage() {}

func (x *SessionsCopy) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsCopy.ProtoReflect.Descriptor instead.
func (*SessionsCopy) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{1}
}

func (x *SessionsCopy) GetSessionCopy() []*SessionCopy {
	if x != nil {
		return x.SessionCopy
	}
	return nil
}

type CallerCalleeUid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerUid  string `protobuf:"bytes,1,opt,name=callerUid,proto3" json:"callerUid,omitempty"`
	CalleeUid  string `protobuf:"bytes,2,opt,name=calleeUid,proto3" json:"calleeUid,omitempty"`
	Exactly    bool   `protobuf:"varint,3,opt,name=exactly,proto3" json:"exactly,omitempty"`
	OnlyOneUid bool   `protobuf:"varint,4,opt,name=onlyOneUid,proto3" json:"onlyOneUid,omitempty"`
}

func (x *CallerCalleeUid) Reset() {
	*x = CallerCalleeUid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerCalleeUid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerCalleeUid) ProtoMessage() {}

func (x *CallerCalleeUid) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerCalleeUid.ProtoReflect.Descriptor instead.
func (*CallerCalleeUid) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{2}
}

func (x *CallerCalleeUid) GetCallerUid() string {
	if x != nil {
		return x.CallerUid
	}
	return ""
}

func (x *CallerCalleeUid) GetCalleeUid() string {
	if x != nil {
		return x.CalleeUid
	}
	return ""
}

func (x *CallerCalleeUid) GetExactly() bool {
	if x != nil {
		return x.Exactly
	}
	return false
}

func (x *CallerCalleeUid) GetOnlyOneUid() bool {
	if x != nil {
		return x.OnlyOneUid
	}
	return false
}

type Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerUid   string `protobuf:"bytes,1,opt,name=callerUid,proto3" json:"callerUid,omitempty"`
	CalleeUid   string `protobuf:"bytes,2,opt,name=calleeUid,proto3" json:"calleeUid,omitempty"`
	NeededKey   string `protobuf:"bytes,3,opt,name=neededKey,proto3" json:"neededKey,omitempty"`
	NeededValue string `protobuf:"bytes,4,opt,name=neededValue,proto3" json:"neededValue,omitempty"`
}

func (x *Var) Reset() {
	*x = Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Var) ProtoMessage() {}

func (x *Var) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Var.ProtoReflect.Descriptor instead.
func (*Var) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{3}
}

func (x *Var) GetCallerUid() string {
	if x != nil {
		return x.CallerUid
	}
	return ""
}

func (x *Var) GetCalleeUid() string {
	if x != nil {
		return x.CalleeUid
	}
	return ""
}

func (x *Var) GetNeededKey() string {
	if x != nil {
		return x.NeededKey
	}
	return ""
}

func (x *Var) GetNeededValue() string {
	if x != nil {
		return x.NeededValue
	}
	return ""
}

type VarMultiple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerUid      string            `protobuf:"bytes,1,opt,name=callerUid,proto3" json:"callerUid,omitempty"`
	CalleeUid      string            `protobuf:"bytes,2,opt,name=calleeUid,proto3" json:"calleeUid,omitempty"`
	NeededKeyValue map[string]string `protobuf:"bytes,3,rep,name=neededKeyValue,proto3" json:"neededKeyValue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VarMultiple) Reset() {
	*x = VarMultiple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarMultiple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarMultiple) ProtoMessage() {}

func (x *VarMultiple) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarMultiple.ProtoReflect.Descriptor instead.
func (*VarMultiple) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{4}
}

func (x *VarMultiple) GetCallerUid() string {
	if x != nil {
		return x.CallerUid
	}
	return ""
}

func (x *VarMultiple) GetCalleeUid() string {
	if x != nil {
		return x.CalleeUid
	}
	return ""
}

func (x *VarMultiple) GetNeededKeyValue() map[string]string {
	if x != nil {
		return x.NeededKeyValue
	}
	return nil
}

type SessionCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallerUid                  string               `protobuf:"bytes,1,opt,name=callerUid,proto3" json:"callerUid,omitempty"`
	CalleeUid                  string               `protobuf:"bytes,2,opt,name=calleeUid,proto3" json:"calleeUid,omitempty"`
	DateStart                  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=dateStart,proto3" json:"dateStart,omitempty"`
	OriginalCallerNum          string               `protobuf:"bytes,7,opt,name=originalCallerNum,proto3" json:"originalCallerNum,omitempty"`
	OriginalCalleeNum          string               `protobuf:"bytes,8,opt,name=originalCalleeNum,proto3" json:"originalCalleeNum,omitempty"`
	CallerNum                  string               `protobuf:"bytes,9,opt,name=callerNum,proto3" json:"callerNum,omitempty"`
	CalleeNum                  string               `protobuf:"bytes,10,opt,name=calleeNum,proto3" json:"calleeNum,omitempty"`
	CallerType                 string               `protobuf:"bytes,11,opt,name=callerType,proto3" json:"callerType,omitempty"`
	CalleeType                 string               `protobuf:"bytes,12,opt,name=calleeType,proto3" json:"calleeType,omitempty"`
	CallDirection              string               `protobuf:"bytes,15,opt,name=callDirection,proto3" json:"callDirection,omitempty"`
	CallType                   string               `protobuf:"bytes,16,opt,name=callType,proto3" json:"callType,omitempty"`
	CallEvent                  string               `protobuf:"bytes,19,opt,name=callEvent,proto3" json:"callEvent,omitempty"`
	FsDirection                string               `protobuf:"bytes,20,opt,name=fsDirection,proto3" json:"fsDirection,omitempty"`
	HangupSide                 string               `protobuf:"bytes,21,opt,name=hangupSide,proto3" json:"hangupSide,omitempty"`
	HangupReason               string               `protobuf:"bytes,22,opt,name=hangupReason,proto3" json:"hangupReason,omitempty"`
	DateRing                   *timestamp.Timestamp `protobuf:"bytes,23,opt,name=dateRing,proto3" json:"dateRing,omitempty"`
	DateCon                    *timestamp.Timestamp `protobuf:"bytes,24,opt,name=dateCon,proto3" json:"dateCon,omitempty"`
	DateEnd                    *timestamp.Timestamp `protobuf:"bytes,25,opt,name=dateEnd,proto3" json:"dateEnd,omitempty"`
	OriginationCallerIdName    string               `protobuf:"bytes,61,opt,name=OriginationCallerIdName,proto3" json:"OriginationCallerIdName,omitempty"`
	OriginationCalleeIdName    string               `protobuf:"bytes,62,opt,name=OriginationCalleeIdName,proto3" json:"OriginationCalleeIdName,omitempty"`
	EffectiveCallerIdName      string               `protobuf:"bytes,63,opt,name=EffectiveCallerIdName,proto3" json:"EffectiveCallerIdName,omitempty"`
	EffectiveCalleeIdName      string               `protobuf:"bytes,64,opt,name=EffectiveCalleeIdName,proto3" json:"EffectiveCalleeIdName,omitempty"`
	OtherLegCalleeIdName       string               `protobuf:"bytes,65,opt,name=OtherLegCalleeIdName,proto3" json:"OtherLegCalleeIdName,omitempty"`
}

func (x *SessionCopy) Reset() {
	*x = SessionCopy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sessionsservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCopy) ProtoMessage() {}

func (x *SessionCopy) ProtoReflect() protoreflect.Message {
	mi := &file_sessionsservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCopy.ProtoReflect.Descriptor instead.
func (*SessionCopy) Descriptor() ([]byte, []int) {
	return file_sessionsservice_proto_rawDescGZIP(), []int{5}
}

func (x *SessionCopy) GetCallerUid() string {
	if x != nil {
		return x.CallerUid
	}
	return ""
}

func (x *SessionCopy) GetCalleeUid() string {
	if x != nil {
		return x.CalleeUid
	}
	return ""
}

func (x *SessionCopy) GetDateStart() *timestamp.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *SessionCopy) GetOriginalCallerNum() string {
	if x != nil {
		return x.OriginalCallerNum
	}
	return ""
}

func (x *SessionCopy) GetOriginalCalleeNum() string {
	if x != nil {
		return x.OriginalCalleeNum
	}
	return ""
}

func (x *SessionCopy) GetCallerNum() string {
	if x != nil {
		return x.CallerNum
	}
	return ""
}

func (x *SessionCopy) GetCalleeNum() string {
	if x != nil {
		return x.CalleeNum
	}
	return ""
}

func (x *SessionCopy) GetCallerType() string {
	if x != nil {
		return x.CallerType
	}
	return ""
}

func (x *SessionCopy) GetCalleeType() string {
	if x != nil {
		return x.CalleeType
	}
	return ""
}

func (x *SessionCopy) GetCallDirection() string {
	if x != nil {
		return x.CallDirection
	}
	return ""
}

func (x *SessionCopy) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *SessionCopy) GetCallEvent() string {
	if x != nil {
		return x.CallEvent
	}
	return ""
}

func (x *SessionCopy) GetFsDirection() string {
	if x != nil {
		return x.FsDirection
	}
	return ""
}

func (x *SessionCopy) GetHangupSide() string {
	if x != nil {
		return x.HangupSide
	}
	return ""
}

func (x *SessionCopy) GetHangupReason() string {
	if x != nil {
		return x.HangupReason
	}
	return ""
}

func (x *SessionCopy) GetDateRing() *timestamp.Timestamp {
	if x != nil {
		return x.DateRing
	}
	return nil
}

func (x *SessionCopy) GetDateCon() *timestamp.Timestamp {
	if x != nil {
		return x.DateCon
	}
	return nil
}

func (x *SessionCopy) GetDateEnd() *timestamp.Timestamp {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

func (x *SessionCopy) GetOriginationCallerIdName() string {
	if x != nil {
		return x.OriginationCallerIdName
	}
	return ""
}

func (x *SessionCopy) GetOriginationCalleeIdName() string {
	if x != nil {
		return x.OriginationCalleeIdName
	}
	return ""
}

func (x *SessionCopy) GetEffectiveCallerIdName() string {
	if x != nil {
		return x.EffectiveCallerIdName
	}
	return ""
}

func (x *SessionCopy) GetEffectiveCalleeIdName() string {
	if x != nil {
		return x.EffectiveCalleeIdName
	}
	return ""
}

func (x *SessionCopy) GetOtherLegCalleeIdName() string {
	if x != nil {
		return x.OtherLegCalleeIdName
	}
	return ""
}

var File_sessionsservice_proto protoreflect.FileDescriptor

var file_sessionsservice_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x05, 0x0a, 0x03, 0x6e, 0x69, 0x6c,
	0x22, 0x4e, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x70, 0x79,
	0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x70, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79,
	0x22, 0x87, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e,
	0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x65, 0x55, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x56,
	0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6,
	0x01, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0e, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x2e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x14, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x53, 0x69, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x53, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x50, 0x6f, 0x6c, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x50, 0x6f, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x13, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x64, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x63, 0x64, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x63, 0x64, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x61, 0x63, 0x64, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x53, 0x69, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x61, 0x76, 0x65, 0x64, 0x50, 0x73,
	0x79, 0x63, 0x68, 0x69, 0x63, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x61, 0x76, 0x65, 0x64, 0x50, 0x73, 0x79, 0x63, 0x68, 0x69,
	0x63, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x50, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x50, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x76, 0x72, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x76, 0x72, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x64, 0x49, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x63, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x74, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x49,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x72, 0x6c, 0x32, 0xc9, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x65, 0x55, 0x69, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x6e, 0x69, 0x6c, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x70, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x12,
	0x14, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x42, 0x4d, 0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x11, 0x2e,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sessionsservice_proto_rawDescOnce sync.Once
	file_sessionsservice_proto_rawDescData = file_sessionsservice_proto_rawDesc
)

func file_sessionsservice_proto_rawDescGZIP() []byte {
	file_sessionsservice_proto_rawDescOnce.Do(func() {
		file_sessionsservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_sessionsservice_proto_rawDescData)
	})
	return file_sessionsservice_proto_rawDescData
}

var file_sessionsservice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sessionsservice_proto_goTypes = []interface{}{
	(*Nil)(nil),                 // 0: sessionsservice.nil
	(*SessionsCopy)(nil),        // 1: sessionsservice.SessionsCopy
	(*CallerCalleeUid)(nil),     // 2: sessionsservice.CallerCalleeUid
	(*Var)(nil),                 // 3: sessionsservice.Var
	(*VarMultiple)(nil),         // 4: sessionsservice.VarMultiple
	(*SessionCopy)(nil),         // 5: sessionsservice.SessionCopy
	nil,                         // 6: sessionsservice.VarMultiple.NeededKeyValueEntry
	(*timestamp.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*wrappers.BoolValue)(nil),  // 8: google.protobuf.BoolValue
}
var file_sessionsservice_proto_depIdxs = []int32{
	5,  // 0: sessionsservice.SessionsCopy.sessionCopy:type_name -> sessionsservice.SessionCopy
	6,  // 1: sessionsservice.VarMultiple.neededKeyValue:type_name -> sessionsservice.VarMultiple.NeededKeyValueEntry
	7,  // 2: sessionsservice.SessionCopy.dateStart:type_name -> google.protobuf.Timestamp
	7,  // 3: sessionsservice.SessionCopy.dateRing:type_name -> google.protobuf.Timestamp
	7,  // 4: sessionsservice.SessionCopy.dateCon:type_name -> google.protobuf.Timestamp
	7,  // 5: sessionsservice.SessionCopy.dateEnd:type_name -> google.protobuf.Timestamp
	7,  // 6: sessionsservice.SessionCopy.acdDateStart:type_name -> google.protobuf.Timestamp
	7,  // 7: sessionsservice.SessionCopy.acdDateEnd:type_name -> google.protobuf.Timestamp
	2,  // 8: sessionsservice.SessionsService.GetSessionCopyService:input_type -> sessionsservice.CallerCalleeUid
	0,  // 9: sessionsservice.SessionsService.GetSessionsCopyService:input_type -> sessionsservice.nil
	3,  // 10: sessionsservice.SessionsService.SetVar:input_type -> sessionsservice.Var
	4,  // 11: sessionsservice.SessionsService.SetVarMultiple:input_type -> sessionsservice.VarMultiple
	5,  // 12: sessionsservice.SessionsService.GetSessionCopyService:output_type -> sessionsservice.SessionCopy
	1,  // 13: sessionsservice.SessionsService.GetSessionsCopyService:output_type -> sessionsservice.SessionsCopy
	8,  // 14: sessionsservice.SessionsService.SetVar:output_type -> google.protobuf.BoolValue
	8,  // 15: sessionsservice.SessionsService.SetVarMultiple:output_type -> google.protobuf.BoolValue
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_sessionsservice_proto_init() }
func file_sessionsservice_proto_init() {
	if File_sessionsservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sessionsservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsCopy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerCalleeUid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarMultiple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sessionsservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCopy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sessionsservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sessionsservice_proto_goTypes,
		DependencyIndexes: file_sessionsservice_proto_depIdxs,
		MessageInfos:      file_sessionsservice_proto_msgTypes,
	}.Build()
	File_sessionsservice_proto = out.File
	file_sessionsservice_proto_rawDesc = nil
	file_sessionsservice_proto_goTypes = nil
	file_sessionsservice_proto_depIdxs = nil
}
