// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: sessionsservice.proto

package sessionsservice

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionsService_GetSessionCopyService_FullMethodName  = "/sessionsservice.SessionsService/GetSessionCopyService"
	SessionsService_GetSessionsCopyService_FullMethodName = "/sessionsservice.SessionsService/GetSessionsCopyService"
	SessionsService_SetVar_FullMethodName                 = "/sessionsservice.SessionsService/SetVar"
	SessionsService_SetVarMultiple_FullMethodName         = "/sessionsservice.SessionsService/SetVarMultiple"
)

// SessionsServiceClient is the client API for SessionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionsServiceClient interface {
	GetSessionCopyService(ctx context.Context, in *CallerCalleeUid, opts ...grpc.CallOption) (*SessionCopy, error)
	GetSessionsCopyService(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*SessionsCopy, error)
	SetVar(ctx context.Context, in *Var, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	SetVarMultiple(ctx context.Context, in *VarMultiple, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type sessionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionsServiceClient(cc grpc.ClientConnInterface) SessionsServiceClient {
	return &sessionsServiceClient{cc}
}

func (c *sessionsServiceClient) GetSessionCopyService(ctx context.Context, in *CallerCalleeUid, opts ...grpc.CallOption) (*SessionCopy, error) {
	out := new(SessionCopy)
	err := c.cc.Invoke(ctx, SessionsService_GetSessionCopyService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) GetSessionsCopyService(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*SessionsCopy, error) {
	out := new(SessionsCopy)
	err := c.cc.Invoke(ctx, SessionsService_GetSessionsCopyService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) SetVar(ctx context.Context, in *Var, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, SessionsService_SetVar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsServiceClient) SetVarMultiple(ctx context.Context, in *VarMultiple, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, SessionsService_SetVarMultiple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionsServiceServer is the server API for SessionsService service.
// All implementations must embed UnimplementedSessionsServiceServer
// for forward compatibility
type SessionsServiceServer interface {
	GetSessionCopyService(context.Context, *CallerCalleeUid) (*SessionCopy, error)
	GetSessionsCopyService(context.Context, *Nil) (*SessionsCopy, error)
	SetVar(context.Context, *Var) (*wrappers.BoolValue, error)
	SetVarMultiple(context.Context, *VarMultiple) (*wrappers.BoolValue, error)
	mustEmbedUnimplementedSessionsServiceServer()
}

// UnimplementedSessionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSessionsServiceServer struct {
}

func (UnimplementedSessionsServiceServer) GetSessionCopyService(context.Context, *CallerCalleeUid) (*SessionCopy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionCopyService not implemented")
}
func (UnimplementedSessionsServiceServer) GetSessionsCopyService(context.Context, *Nil) (*SessionsCopy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsCopyService not implemented")
}
func (UnimplementedSessionsServiceServer) SetVar(context.Context, *Var) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVar not implemented")
}
func (UnimplementedSessionsServiceServer) SetVarMultiple(context.Context, *VarMultiple) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVarMultiple not implemented")
}
func (UnimplementedSessionsServiceServer) mustEmbedUnimplementedSessionsServiceServer() {}

// UnsafeSessionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionsServiceServer will
// result in compilation errors.
type UnsafeSessionsServiceServer interface {
	mustEmbedUnimplementedSessionsServiceServer()
}

func RegisterSessionsServiceServer(s grpc.ServiceRegistrar, srv SessionsServiceServer) {
	s.RegisterService(&SessionsService_ServiceDesc, srv)
}

func _SessionsService_GetSessionCopyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerCalleeUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).GetSessionCopyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_GetSessionCopyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).GetSessionCopyService(ctx, req.(*CallerCalleeUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_GetSessionsCopyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).GetSessionsCopyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_GetSessionsCopyService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).GetSessionsCopyService(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_SetVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Var)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).SetVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_SetVar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).SetVar(ctx, req.(*Var))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionsService_SetVarMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VarMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServiceServer).SetVarMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionsService_SetVarMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServiceServer).SetVarMultiple(ctx, req.(*VarMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionsService_ServiceDesc is the grpc.ServiceDesc for SessionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sessionsservice.SessionsService",
	HandlerType: (*SessionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionCopyService",
			Handler:    _SessionsService_GetSessionCopyService_Handler,
		},
		{
			MethodName: "GetSessionsCopyService",
			Handler:    _SessionsService_GetSessionsCopyService_Handler,
		},
		{
			MethodName: "SetVar",
			Handler:    _SessionsService_SetVar_Handler,
		},
		{
			MethodName: "SetVarMultiple",
			Handler:    _SessionsService_SetVarMultiple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sessionsservice.proto",
}
